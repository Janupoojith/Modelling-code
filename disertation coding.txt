SGD algorithm:

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import accuracy_score, classification_report, roc_curve, auc
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import SGDClassifier
from sklearn.impute import SimpleImputer

# Load the CSV file into a pandas DataFrame
df = pd.read_csv(r"C:\Users\jahna\Downloads\FeedGrains.csv")

# Equal-width binning with integer labels
df['Amount_Binned_EqualWidth_Int'] = pd.cut(df['Amount'], bins=4, labels=False)

# Equal-frequency binning (quantiles) with integer labels
df['Amount_Binned_EqualFreq_Int'] = pd.qcut(df['Amount'], q=4, labels=False)

# Combine the two binned columns into one discrete amount column
df['Discrete_Amount'] = df['Amount_Binned_EqualWidth_Int'].astype(str) + '_' + df['Amount_Binned_EqualFreq_Int'].astype(str)

# Replace NaN values in specific columns using forward fill
columns_to_fill = ['SC_GroupCommod_ID', 'SC_GroupCommod_Desc']
df[columns_to_fill] = df[columns_to_fill].ffill()

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Encode categorical columns
categorical_columns = ['SC_Group_Desc', 'SC_GroupCommod_Desc', 'SC_GeographyIndented_Desc', 'SC_Commodity_Desc', 'SC_Attribute_Desc', 'SC_Unit_Desc', 'SC_Frequency_Desc', 'Timeperiod_Desc']
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

# Assuming 'Amount' and other relevant columns are used as features
X = df[['SC_Group_ID', 'SC_Group_Desc', 'SC_GroupCommod_ID', 'SC_GroupCommod_Desc', 'SC_Geography_ID', 'SortOrder', 'SC_GeographyIndented_Desc', 'SC_Commodity_ID', 'SC_Commodity_Desc', 'SC_Attribute_ID', 'SC_Unit_Desc', 'Year_ID', 'SC_Frequency_ID', 'SC_Frequency_Desc', 'Timeperiod_ID', 'Timeperiod_Desc', 'Amount', 'Amount_Binned_EqualWidth_Int', 'Amount_Binned_EqualFreq_Int']]
y = df['Discrete_Amount']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Standardize the features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

# Initialize the SGD classifier
sgd_clf = SGDClassifier(random_state=42)

# Train the model
sgd_clf.fit(X_train, y_train)

# Predict the test set
y_pred = sgd_clf.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f"Accuracy: {accuracy}")
print("Classification Report:")
print(classification_report(y_test, y_pred))

# Plotting the ROC curve
y_prob = sgd_clf.decision_function(X_test)
fpr, tpr, thresholds = roc_curve(y_test, y_prob, pos_label=y.unique()[1])
roc_auc = auc(fpr, tpr)

plt.figure()
plt.plot(fpr, tpr, color='darkorange', lw=2, label='ROC curve (area = %0.2f)' % roc_auc)
plt.plot([0, 1], [0, 1], color='navy', lw=2, linestyle='--')
plt.xlim([0.0, 1.0])
plt.ylim([0.0, 1.05])
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.title('Receiver Operating Characteristic')
plt.legend(loc="lower right")
plt.show()



KNN:

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import accuracy_score, classification_report
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.metrics import roc_curve, auc
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.neighbors import KNeighborsClassifier

# Load the CSV file into a pandas DataFrame
df = pd.read_csv(r"C:\Users\jahna\Downloads\FeedGrains.csv")

# Equal-width binning with integer labels
df['Amount_Binned_EqualWidth_Int'] = pd.cut(df['Amount'], bins=4, labels=False)

# Equal-frequency binning (quantiles) with integer labels
df['Amount_Binned_EqualFreq_Int'] = pd.qcut(df['Amount'], q=4, labels=False)

# Combine the two binned columns into one discrete amount column
df['Discrete_Amount'] = df['Amount_Binned_EqualWidth_Int'].astype(str) + '_' + df['Amount_Binned_EqualFreq_Int'].astype(str)

# Replace NaN values in specific columns using forward fill
columns_to_fill = ['SC_GroupCommod_ID', 'SC_GroupCommod_Desc']
df[columns_to_fill] = df[columns_to_fill].ffill()

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Encode categorical columns
categorical_columns = [
    'SC_Group_Desc', 'SC_GroupCommod_Desc', 'SC_GeographyIndented_Desc',
    'SC_Commodity_Desc', 'SC_Attribute_Desc', 'SC_Unit_Desc', 
    'SC_Frequency_Desc', 'Timeperiod_Desc'
]
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

# Assuming 'Amount' and other relevant columns are used as features
X = df[
    ['SC_Group_ID', 'SC_Group_Desc', 'SC_GroupCommod_ID', 'SC_GroupCommod_Desc', 
     'SC_Geography_ID', 'SortOrder', 'SC_GeographyIndented_Desc', 
     'SC_Commodity_ID', 'SC_Commodity_Desc', 'SC_Attribute_ID', 'SC_Unit_Desc', 
     'Year_ID', 'SC_Frequency_ID', 'SC_Frequency_Desc', 'Timeperiod_ID', 
     'Timeperiod_Desc', 'Amount', 'Amount_Binned_EqualWidth_Int', 
     'Amount_Binned_EqualFreq_Int']
]
y = df['Discrete_Amount']

# Ensure all features are numeric
X = X.apply(pd.to_numeric)

# Standardize the features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)

# Initialize and train the KNN classifier
knn = KNeighborsClassifier(n_neighbors=5)
knn.fit(X_train, y_train)

# Make predictions on the test set
y_pred = knn.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(classification_report(y_test, y_pred))

# Optionally, plot the confusion matrix
from sklearn.metrics import confusion_matrix
conf_mat = confusion_matrix(y_test, y_pred)
sns.heatmap(conf_mat, annot=True, fmt='d', cmap='Blues')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()

Naive Bayes:

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report
import matplotlib.pyplot as plt
import seaborn as sns
import re
from sklearn.preprocessing import LabelEncoder, StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import roc_curve
from sklearn.metrics import auc
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.impute import SimpleImputer
from sklearn.naive_bayes import GaussianNB  # Import Gaussian Naive Bayes

# Load the CSV file into a pandas DataFrame
df = pd.read_csv(r"C:\Users\jahna\Downloads\FeedGrains.csv")

# Equal-width binning with integer labels
df['Amount_Binned_EqualWidth_Int'] = pd.cut(df['Amount'], bins=4, labels=False)

# Equal-frequency binning (quantiles) with integer labels
df['Amount_Binned_EqualFreq_Int'] = pd.qcut(df['Amount'], q=4, labels=False)

# Display the first few rows with the new binned columns
print(df[['Amount', 'Amount_Binned_EqualWidth_Int', 'Amount_Binned_EqualFreq_Int']].head(463118))

# Combine the two binned columns into one discrete amount column
df['Discrete_Amount'] = df['Amount_Binned_EqualWidth_Int'].astype(str) + '_' + df['Amount_Binned_EqualFreq_Int'].astype(str)

# Display the first few rows with the new combined column
print(df[['Amount', 'Discrete_Amount']].head(463118))

# Replace NaN values in specific columns using forward fill
columns_to_fill = ['SC_GroupCommod_ID', 'SC_GroupCommod_Desc']
df[columns_to_fill] = df[columns_to_fill].ffill()

# Check for missing values
print(df.isnull().sum())

# Initialize LabelEncoder
label_encoder = LabelEncoder()

# Encode categorical columns
categorical_columns = ['SC_Group_Desc', 'SC_GroupCommod_Desc', 'SC_GeographyIndented_Desc', 'SC_Commodity_Desc', 'SC_Attribute_Desc', 'SC_Unit_Desc', 'SC_Frequency_Desc', 'Timeperiod_Desc']
for column in categorical_columns:
    df[column] = label_encoder.fit_transform(df[column])

# Assuming 'Amount' and other relevant columns are used as features
X = df[['SC_Group_ID', 'SC_Group_Desc', 'SC_GroupCommod_ID', 'SC_GroupCommod_Desc', 'SC_Geography_ID', 'SortOrder', 'SC_GeographyIndented_Desc', 'SC_Commodity_ID', 'SC_Commodity_Desc', 'SC_Attribute_ID', 'SC_Unit_Desc', 'Year_ID', 'SC_Frequency_ID', 'SC_Frequency_Desc', 'Timeperiod_ID', 'Timeperiod_Desc', 'Amount', 'Amount_Binned_EqualWidth_Int', 'Amount_Binned_EqualFreq_Int']]  # Adjust features as per your dataset
y = df['Discrete_Amount']  # Adjust the target column name as per your dataset

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Initialize the Naive Bayes classifier
nb = GaussianNB()

# Train the classifier
nb.fit(X_train, y_train)

# Make predictions
y_pred = nb.predict(X_test)

# Evaluate the classifier
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')
print('Classification Report:')
print(classification_report(y_test, y_pred))











































